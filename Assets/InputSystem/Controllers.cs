//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/Controllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controllers"",
    ""maps"": [
        {
            ""name"": ""GameControllers"",
            ""id"": ""02b2eea7-d7a5-4a5b-bcec-c8a1abcfa0c1"",
            ""actions"": [
                {
                    ""name"": ""FireButton"",
                    ""type"": ""Button"",
                    ""id"": ""e3d23491-05e8-40bc-98bd-dc775dc522e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationMove"",
                    ""type"": ""Value"",
                    ""id"": ""f16c6cbe-d68f-40c8-a7f9-66e6b80967be"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ForwardMove"",
                    ""type"": ""Value"",
                    ""id"": ""68453244-8a07-4f95-a4e8-f3fc53d384fe"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8e5dbb1-340a-4a19-8d63-d703974f466c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a014f2a2-9b99-4beb-97c2-aedc01bf0dec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b4092bda-201c-4e28-ab1e-c1d71a99143d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a576002-cb81-409c-926b-308081331e09"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": "" 1D Axis Aternative"",
                    ""id"": ""c86313ab-15d7-4728-aa57-22b758cfa8ab"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7c3d45eb-86bd-4abe-8c90-f06ff6196ab3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a46e839-6731-4371-813a-3b474d21d289"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""61c2b177-69ed-4130-b16c-af3c2ed43deb"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00daa275-c92a-4553-b1d5-b87844d3ccf6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameControllers
        m_GameControllers = asset.FindActionMap("GameControllers", throwIfNotFound: true);
        m_GameControllers_FireButton = m_GameControllers.FindAction("FireButton", throwIfNotFound: true);
        m_GameControllers_RotationMove = m_GameControllers.FindAction("RotationMove", throwIfNotFound: true);
        m_GameControllers_ForwardMove = m_GameControllers.FindAction("ForwardMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControllers
    private readonly InputActionMap m_GameControllers;
    private IGameControllersActions m_GameControllersActionsCallbackInterface;
    private readonly InputAction m_GameControllers_FireButton;
    private readonly InputAction m_GameControllers_RotationMove;
    private readonly InputAction m_GameControllers_ForwardMove;
    public struct GameControllersActions
    {
        private @Controllers m_Wrapper;
        public GameControllersActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireButton => m_Wrapper.m_GameControllers_FireButton;
        public InputAction @RotationMove => m_Wrapper.m_GameControllers_RotationMove;
        public InputAction @ForwardMove => m_Wrapper.m_GameControllers_ForwardMove;
        public InputActionMap Get() { return m_Wrapper.m_GameControllers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControllersActions set) { return set.Get(); }
        public void SetCallbacks(IGameControllersActions instance)
        {
            if (m_Wrapper.m_GameControllersActionsCallbackInterface != null)
            {
                @FireButton.started -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnFireButton;
                @FireButton.performed -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnFireButton;
                @FireButton.canceled -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnFireButton;
                @RotationMove.started -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnRotationMove;
                @RotationMove.performed -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnRotationMove;
                @RotationMove.canceled -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnRotationMove;
                @ForwardMove.started -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnForwardMove;
                @ForwardMove.performed -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnForwardMove;
                @ForwardMove.canceled -= m_Wrapper.m_GameControllersActionsCallbackInterface.OnForwardMove;
            }
            m_Wrapper.m_GameControllersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FireButton.started += instance.OnFireButton;
                @FireButton.performed += instance.OnFireButton;
                @FireButton.canceled += instance.OnFireButton;
                @RotationMove.started += instance.OnRotationMove;
                @RotationMove.performed += instance.OnRotationMove;
                @RotationMove.canceled += instance.OnRotationMove;
                @ForwardMove.started += instance.OnForwardMove;
                @ForwardMove.performed += instance.OnForwardMove;
                @ForwardMove.canceled += instance.OnForwardMove;
            }
        }
    }
    public GameControllersActions @GameControllers => new GameControllersActions(this);
    public interface IGameControllersActions
    {
        void OnFireButton(InputAction.CallbackContext context);
        void OnRotationMove(InputAction.CallbackContext context);
        void OnForwardMove(InputAction.CallbackContext context);
    }
}
